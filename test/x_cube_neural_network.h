#ifndef X_CUBE_NEURAL_NETWORK_H
#define X_CUBE_NEURAL_NETWORK_H

#include <vector>
#include "signal_utils.h"


/**
 * This function returns an MLP trained to return the values of the x^3 function
 * for x in (-10, 10);
 *
 */
MultilayerPerceptron* get_xcube_mlp() {

	static std::vector<double> w1({8.05565395e-05,  -7.41373099e-01,  -9.36629362e-01,
								  8.79634519e-01,  -1.93411183e+00,  -1.06162752e+00,
								 -1.00709652e+00,   1.68182718e+00,  -7.41014961e-41,
								 -1.80047507e+00,   1.39241811e+00,  -2.04344775e+00,
								  5.69011258e-16,  -9.76796065e-01,  -9.68498114e-01,
								 -7.68868867e-01,   8.43108575e-01,   2.10326191e-05,
								 -4.47903451e-06,   1.16708035e+00,  -1.22175710e+00,
								  1.78093272e+00,   1.04600732e+00,  -1.02790400e+00,
								  1.38231093e+00,   9.55521449e-01,   2.27449602e+00,
								  9.24751946e-01,  -7.49707531e-01,   9.90360130e-01,
								  6.28391605e-09,   8.39663065e-01,  -1.66071215e+00,
								 -7.86727019e-01,   1.87998229e+00,  -1.70282474e-05,
								  1.20413733e+00,  -1.10322726e+00,   8.78394151e-01,
								  1.98201533e+00,   1.00722849e+00,   1.16577819e+00,
								 -1.32274819e+00,  -1.37623138e+00,   1.56284475e+00,
								 -9.83894927e-01,   1.43023444e+00,  -1.75516414e-09,
								 -7.27626236e-01,  -7.83364612e-01,  -1.75072236e+00,
								  5.48661707e-08,  -1.15862436e+00,   9.18233170e-12,
								 -9.26648907e-01,  -4.73289041e-18,   1.15472776e+00,
								 -1.13361362e+00,   1.80477640e-14,  -1.16751844e+00,
								 -1.02984574e-06,  -7.68341780e-07,  -1.19665733e+00,
								 -1.51789374e+00,   8.90382246e-01,   2.11869028e+00,
								  4.11533803e-20,  -2.41106871e+00,  -1.47426945e+00,
								 -1.56225961e+00,   1.06312769e+00,   1.27505158e+00,
								 -7.32664908e-01,  -4.95287818e-08,  -1.00182002e+00,
								 -9.07349252e-01,   1.50785824e+00,  -8.33157230e-01,
								  3.30296740e-08,  -1.00174004e+00,  -4.50912075e-14,
								  1.67507358e-17,  -8.88004611e-01,  -4.90926304e-06,
								 -1.17166619e+00,  -1.39061199e+00,  -1.12710465e+00,
								  2.68640941e+00,  -9.43266416e-01,  -1.06083891e+00,
								  2.14124769e-06,   8.55047444e-01,  -8.80995290e-01,
								  1.28140087e+00,   1.11026543e+00,   2.19988774e-52,
								 -9.44320495e-01,  -4.05804089e-16,   9.79734208e-01,
								 -9.30729297e-01});
	dlib::matrix<double> W1 = vector_to_dlib_matrix(w1);
	W1 = dlib::trans(W1);

	static std::vector<double> i1({
			   -0.41922458, -6.93011384, -6.42826936, -7.9321703 , -4.59536761,
			   -6.38773212, -7.19623132, -7.52980465, -0.18868123, -4.97434029,
			   -7.80173613, -3.84781027, -0.11183301, -6.5749458 , -8.12607352,
			   -7.0171713 , -7.81753183, -0.22293256, -0.23672981, -7.86311751,
			   -5.87895283, -7.3580334 , -8.25572545, -6.3373054 , -8.09940745,
			   -8.04261333, -5.20430939, -7.935163  , -6.92302144, -8.15795766,
			   -0.06114871, -7.78551306, -5.66776632, -7.01077127, -7.09256629,
			   -0.39707065, -8.59937841, -6.46579266, -7.7925588 , -6.60529183,
			   -7.77639712, -7.62353831, -6.6166103 , -6.05694726, -7.46879127,
			   -8.0946903 , -7.63552353, -0.09036562, -6.81834399, -7.07265421,
			   -5.43088406, -0.04431095, -6.41783893, -0.09975284, -8.02607605,
			   -0.07504127, -8.49026418, -8.96873015, -0.16349409, -6.25233604,
			   -0.20998611, -0.1133515 , -6.22644589, -6.32429014, -7.77478778,
			   -6.04717205, -0.2490008 , -2.32768355, -5.79780707, -5.75303522,
			   -8.02231406, -8.06708698, -6.85836548, -0.15492902, -6.32189146,
			   -6.60328321, -7.634191  , -7.32569943, -0.29900129, -7.01129342,
			   -0.09914917, -0.09270328, -6.5673177 , -0.15366738, -8.86931657,
			   -6.42523317, -6.42232872, -3.28137795, -7.63014389, -6.85075591,
			   -0.22700176, -7.84740765, -7.51144475, -7.81906708, -7.69959554,
			   -0.18093568, -7.31446352, -0.11802968, -7.90353278, -6.14305207});

	dlib::matrix<double> I1 = vector_to_dlib_matrix(i1);
	I1 = dlib::trans(I1);

	static std::vector<double> w2({		-2.21682966e-005,  -7.44692563e+000,  -5.70804311e+000,
								 9.33298959e+000,  -3.27192947e+000,  -5.22341291e+000,
								-6.10124747e+000,   5.08567173e+000,  -2.35673114e-204,
								-3.34562289e+000,   6.31084542e+000,  -3.11272027e+000,
								 1.64048144e-106,  -5.65845199e+000,  -8.08393506e+000,
								-7.35229760e+000,   9.09244808e+000,   2.47231407e-012,
								 1.95330663e-007,   7.10183405e+000,  -4.23342493e+000,
								 4.88440489e+000,   8.10980053e+000,  -5.25094241e+000,
								 6.41613225e+000,   8.89903706e+000,   4.06329635e+000,
								 8.69998609e+000,  -7.83651414e+000,   8.74272669e+000,
								-4.74106170e-009,   9.33256448e+000,  -3.52688863e+000,
								-7.77997807e+000,   4.79246488e+000,   9.40676629e-006,
								 7.79163225e+000,  -5.05473196e+000,   8.69566994e+000,
								 4.63473113e+000,   7.82598553e+000,   6.60257318e+000,
								-4.55241846e+000,  -4.20187113e+000,   5.42923657e+000,
								-8.01001112e+000,   6.02033887e+000,   8.00443206e-058,
								-7.26856635e+000,  -7.66254457e+000,  -3.42556178e+000,
								 1.22272303e-005,  -4.80344721e+000,  -1.08787059e-115,
								-8.03857179e+000,  -3.07732213e-036,   7.68210181e+000,
								-8.51608019e+000,  -5.67682066e-081,  -4.65029020e+000,
								 7.99922298e-016,   1.69825657e-006,  -4.60731000e+000,
								-3.96790040e+000,   8.59570094e+000,   4.20002278e+000,
								 3.33849375e-080,  -2.99957181e+000,  -3.79127939e+000,
								-3.68635574e+000,   7.73525851e+000,   6.69719203e+000,
								-7.71683228e+000,   6.37226080e-034,  -5.42820082e+000,
								-5.99910766e+000,   5.57993192e+000,  -7.89720379e+000,
								-8.41085639e-017,  -5.96164771e+000,   6.54879020e-012,
								-4.68964589e-020,  -6.05718019e+000,   8.05286200e-011,
								-8.52412499e+000,  -4.30894932e+000,  -4.92920308e+000,
								 3.98184757e+000,  -7.04104748e+000,  -5.55049377e+000,
								-1.40195575e-009,   9.26557850e+000,  -7.13977299e+000,
								 6.56219975e+000,   7.13630807e+000,   3.10628012e-090,
								-6.48244547e+000,   8.65501047e-013,   8.20943159e+000,
								-5.46442197e+000});

	dlib::matrix<double> W2 = vector_to_dlib_matrix(w2);

	dlib::matrix<double> I2(1,1);
	I2(0,0) = 0.16336686;

	std::vector<dlib::matrix<double>> weights({W1, W2});
	std::vector<dlib::matrix<double>> intercepts({I1, I2});
	return new MultilayerPerceptron(weights, intercepts);
}

#endif
